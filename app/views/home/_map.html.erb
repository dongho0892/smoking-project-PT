
<div class="card-body">
    &nbsp;<code>Tip!</code><br>
    &nbsp;<code>1. 찾으시려는 위치의 주소를 검색하시면, 빠르게 확인이 가능합니다!</code><br>
    &nbsp;<code>2. GPS를 방금 키셨다면, 새로고침을 해주세요!</code>
</div>
<form>
<div class="input-group input-group-sm mb-3">
 <div class="input-group-prepend">
 &nbsp;&nbsp;&nbsp;주소 검색 &nbsp; <input type="text" id="add_search" name="address" class="input-group-text form-control">
 <input type="button" id="search" value="검색하기" class="input-group-text btn btn-dark">&nbsp;&nbsp;&nbsp;
 </div>
 </div>
</form>
    
    
<div class ="m-3"><div id="map" style="width:100%;height:400px;z-index: 0;"></div></div>
<script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=<%= ENV['DAUM_MAP_API'] %>&libraries=services"></script>
<script>                                                                


var mapContainer = document.getElementById('map'), // 지도의 중심좌표
    mapOption = { 
        center: new daum.maps.LatLng(37.49804942762577, 127.02786455761496), // 지도의 중심좌표
        level: 2 // 지도의 확대 레벨
    }; 

var map = new daum.maps.Map(mapContainer, mapOption); // 지도를 생성합니다


$('#search').on('click',function(){
    var address = $('#add_search').val();
    console.log(address);
    search(address);
})
function search(address){
var geocoder = new daum.maps.services.Geocoder();

// 주소로 좌표를 검색합니다
geocoder.addressSearch(address, function(result, status) {

    // 정상적으로 검색이 완료됐으면 
     if (status === daum.maps.services.Status.OK) {

        var coords = new daum.maps.LatLng(result[0].y, result[0].x);
        
        // 지도의 중심을 결과값으로 받은 위치로 이동시킵니다
        map.setCenter(coords);
        
        daum.maps.event.addListener(map, 'click', function(mouseEvent) {     
        infowindow.close();
    });
    } 
});  
}


// HTML5의 geolocation으로 사용할 수 있는지 확인합니다 
if (navigator.geolocation) {
    
    // GeoLocation을 이용해서 접속 위치를 얻어옵니다
    navigator.geolocation.getCurrentPosition(function(position) {
        
        var lat = position.coords.latitude, // 위도
            lon = position.coords.longitude; // 경도
        
        var locPosition = new daum.maps.LatLng(lat, lon), // 마커가 표시될 위치를 geolocation으로 얻어온 좌표로 생성합니다
            message = '<div style="style="width:150px;text-align:center;padding:6px;"">현재 위치</div>'; // 인포윈도우에 표시될 내용입니다
        
        // 마커와 인포윈도우를 표시합니다
        displayMarker(locPosition, message);
            
      });
    
} else { // HTML5의 GeoLocation을 사용할 수 없을때 마커 표시 위치와 인포윈도우 내용을 설정합니다
    
    var locPosition = new daum.maps.LatLng(33.450701, 126.570667),    
        message = 'geolocation을 사용할수 없어요..'
        
    displayMarker(locPosition, message);
}

// 지도에 마커와 인포윈도우를 표시하는 함수입니다
function displayMarker(locPosition, message) {

    // 마커를 생성합니다
    var marker = new daum.maps.Marker({  
        map: map, 
        position: locPosition
    }); 
    
    var iwContent = message, // 인포윈도우에 표시할 내용
        iwRemoveable = true;

    // 인포윈도우를 생성합니다
    var infowindow = new daum.maps.InfoWindow({
        content : iwContent,
        removable : iwRemoveable
    });
    
    // 인포윈도우를 마커위에 표시합니다 
    infowindow.open(map, marker);
    
    // 지도 중심좌표를 접속위치로 변경합니다
    map.setCenter(locPosition);      
}    


var latitude = []; 
var longitude = [];    // 위도 경도 자료 위치

var sw = [],          //   배열 생성
    ne = [];
    
var rectangleBounds = [];

var circle = [];

daum.maps.event.addListener(map, 'zoom_changed', function() {        
    
    // 지도의 현재 레벨을 얻어옵니다
    var level = map.getLevel();
    console.log(level);
});


<% @home.each do |smoking_area| %>
   
latitude = <%= smoking_area.latitude %>   // 한번씩 뽑아서 위도, 경도에 넣어줌.
longitude = <%= smoking_area.longitude %> 


// 지도에 표시할 원을 생성합니다
 circle = new daum.maps.Circle({
    center : new daum.maps.LatLng(latitude, longitude),  // 원의 중심좌표 입니다 
    radius: 15, // 미터 단위의 원의 반지름입니다 
    strokeWeight: 1, // 선의 두께입니다 
    strokeColor: '#b30000', // 선의 색깔입니다
    strokeOpacity: 0, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
    strokeStyle: 'solid', // 선의 스타일 입니다
    fillColor: '#ff5c33', // 채우기 색깔입니다
    fillOpacity: 0.55  // 채우기 불투명도 입니다   
}); 

// 지도에 원을 표시합니다 
circle.setMap(map); 

<% end %>


// sw = new daum.maps.LatLng(latitude + 0.0002, longitude + 0.0002), // 사각형 영역의 남서쪽 좌표
// ne = new daum.maps.LatLng(latitude - 0.0002, longitude - 0.0002); // 사각형 영역의 북동쪽 좌표


// // 사각형을 구성하는 영역정보를 생성합니다
// // 사각형을 생성할 때 영역정보는 LatLngBounds 객체로 넘겨줘야 합니다
// rectangleBounds = new daum.maps.LatLngBounds(sw, ne);


// // 지도에 표시할 사각형을 생성합니다
// var rectangle = new daum.maps.Rectangle({
//     bounds: rectangleBounds, // 그려질 사각형의 영역정보입니다
//     strokeWeight: 1, // 선의 두께입니다
//     strokeColor: '#ff3333', // 선의 색깔입니다
//     strokeOpacity: 0.7, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
//     strokeStyle: 'solid', // 선의 스타일입니다
//     fillColor: '#ff3333', // 채우기 색깔입니다
//     fillOpacity: 0.7 // 채우기 불투명도 입니다
// });
// // 지도에 사각형을 표시합니다
// rectangle.setMap(map);


var polygonPath = [
    new daum.maps.LatLng(37.50455081898132, 127.02503390684666),
    new daum.maps.LatLng(37.504460763789204,127.02481899371813),
    new daum.maps.LatLng(37.49827919888655, 127.02780244512908),
    new daum.maps.LatLng(37.498315201771305, 127.02796078038493),
];

// 지도에 표시할 다각형을 생성합니다
var polygon = new daum.maps.Polygon({
    path:polygonPath, // 그려질 다각형의 좌표 배열입니다
    strokeWeight: 1, // 선의 두께입니다
    strokeColor: '#ff3333', // 선의 색깔입니다
    strokeOpacity: 0.7, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
    strokeStyle: 'solid', // 선의 스타일입니다
    fillColor: '#ff3333', // 채우기 색깔입니다
    fillOpacity: 0.7 // 채우기 불투명도 입니다
});

polygon.setMap(map);

polygonPath = [
    new daum.maps.LatLng(37.49806759282086, 127.02724258749389),
    new daum.maps.LatLng(37.50430769870758, 127.02431001052645),
    new daum.maps.LatLng(37.50424917507574, 127.0241064187005),
    new daum.maps.LatLng(37.49801807258028, 127.02708990255496),
];

var polygon = new daum.maps.Polygon({
    path:polygonPath, // 그려질 다각형의 좌표 배열입니다
    strokeWeight: 1, // 선의 두께입니다
    strokeColor: '#ff3333', // 선의 색깔입니다
    strokeOpacity: 0.7, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
    strokeStyle: 'solid', // 선의 스타일입니다
    fillColor: '#ff3333', // 채우기 색깔입니다
    fillOpacity: 0.7 // 채우기 불투명도 입니다
});

polygon.setMap(map);

lati = [37.49852679212594, 37.49884240188401, 37.49864880414587, 37.49796405612868, 37.49752250869772, 37.497202524164926, 37.49662130839081, 37.495301181383525, 37.495598406001, 37.49677435316694, 37.49732403226293, 37.49807624096031];
longi = [127.02857153121707, 127.02748600789467, 127.02697138844455, 127.02689763591084, 127.02713495789244, 127.02768330629867, 127.02796580305757, 127.02860140004015, 127.02904253701253, 127.02849453135077, 127.02822333480853, 127.02876926131097];

for (var i = 0 ; i < lati.length; i ++) {


// 지도에 표시할 원을 생성합니다
circle = new daum.maps.Circle({
    center : new daum.maps.LatLng(lati[i], longi[i]),  // 원의 중심좌표 입니다 
    radius: 15, // 미터 단위의 원의 반지름입니다 
    strokeWeight: 1, // 선의 두께입니다 
    strokeColor: '#b30000', // 선의 색깔입니다
    strokeOpacity: 0, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
    strokeStyle: 'solid', // 선의 스타일 입니다
    fillColor: '#ff5c33', // 채우기 색깔입니다
    fillOpacity: 0.55  // 채우기 불투명도 입니다   
}); 

// 지도에 원을 표시합니다 
circle.setMap(map); 

}

lati = [37.50048630666301, 37.50050901767118, 37.500108483664114, 37.5005455221342, 37.50093706371588, 37.50123887094025, 37.50125677496612, 37.501166583878344];
longi = [127.03727740752137, 127.03668369430147, 127.03532642100578, 127.03515699124273, 127.03646337620484, 127.03655965073163, 127.03693286144672, 127.0372212000283];

for (var j = 0 ; j < lati.length; j ++) {


// 지도에 표시할 원을 생성합니다
circle = new daum.maps.Circle({
    center : new daum.maps.LatLng(lati[j], longi[j]),  // 원의 중심좌표 입니다 
    radius: 15, // 미터 단위의 원의 반지름입니다 
    strokeWeight: 1, // 선의 두께입니다 
    strokeColor: '#b30000', // 선의 색깔입니다
    strokeOpacity: 0, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
    strokeStyle: 'solid', // 선의 스타일 입니다
    fillColor: '#ff5c33', // 채우기 색깔입니다
    fillOpacity: 0.55  // 채우기 불투명도 입니다   
}); 

// 지도에 원을 표시합니다 
circle.setMap(map); 

}

lati = [37.50459918232826, 37.504148977130136, 37.504067987978615, 127.04909769398876, 37.50442439095034, 37.504631338245694, 37.50496017019521, 37.50504565826577, 37.50483828850671, 37.50503175321128, 37.507186572273554, 37.50768647091965, 37.5078936117736, 37.50760965994987, 37.50732580395588, 37.50667708702335, 37.50687996025931, 37.50700625865849];
longi = [127.05004805284598, 127.04934090314198, 127.04909769398876, 127.04803454518539, 127.04786517788555, 127.04856085407444, 127.0486458898823, 127.04890606896008, 127.04923956956834, 127.04983911178925, 127.03293768148447, 127.03350340717995, 127.03382018402104, 127.03428942546081, 127.03442501642469, 127.03440209859622, 127.03389324172097, 127.03333910791707];
        
for (var j = 0 ; j < lati.length; j ++) {


// 지도에 표시할 원을 생성합니다
circle = new daum.maps.Circle({
    center : new daum.maps.LatLng(lati[j], longi[j]),  // 원의 중심좌표 입니다 
    radius: 15, // 미터 단위의 원의 반지름입니다 
    strokeWeight: 1, // 선의 두께입니다 
    strokeColor: '#b30000', // 선의 색깔입니다
    strokeOpacity: 0, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
    strokeStyle: 'solid', // 선의 스타일 입니다
    fillColor: '#ff5c33', // 채우기 색깔입니다
    fillOpacity: 0.55  // 채우기 불투명도 입니다   
}); 

// 지도에 원을 표시합니다 
circle.setMap(map); 

}


lati = [37.504512759944156, 37.504828081965094, 37.50480992292239, 37.50459806453302, 37.50414312781248, 37.50405764579472, 37.504237926911806, 37.51109502102431, 37.51076163271918, 37.51060855693487, 37.51086538679685, 37.511162740357, 37.51164029562775, 37.51168974990745, 37.51135182491044, 37.51028718152928, 37.510615634228536, 37.51033626963934, 37.51001683661905];
longi = [127.02390575729585, 127.02405288381004, 127.02472580438234, 127.02530252693754, 127.02496874059499, 127.02442585258102, 127.0240357300771, 127.02173055906144, 127.02182094709214, 127.02130061666534, 127.021057511727, 127.02093317815807, 127.02080323827171, 127.02136878826907, 127.02163449277963, 127.04332209512648, 127.0444363753819, 127.04457759127548, 127.04344069884111];
    
for (var j = 0 ; j < lati.length; j ++) {


// 지도에 표시할 원을 생성합니다
circle = new daum.maps.Circle({
    center : new daum.maps.LatLng(lati[j], longi[j]),  // 원의 중심좌표 입니다 
    radius: 15, // 미터 단위의 원의 반지름입니다 
    strokeWeight: 1, // 선의 두께입니다 
    strokeColor: '#b30000', // 선의 색깔입니다
    strokeOpacity: 0, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
    strokeStyle: 'solid', // 선의 스타일 입니다
    fillColor: '#ff5c33', // 채우기 색깔입니다
    fillOpacity: 0.55  // 채우기 불투명도 입니다   
}); 

// 지도에 원을 표시합니다 
circle.setMap(map); 

}







var positions = [];
// 커스텀 오버레이에 표시할 컨텐츠 입니다
// 커스텀 오버레이는 아래와 같이 사용자가 자유롭게 컨텐츠를 구성하고 이벤트를 제어할 수 있기 때문에
// 별도의 이벤트 메소드를 제공하지 않습니다 
            //'                <div><a href="http://www.kakaocorp.com/main" target="_blank" class="link">홈페이지</a></div>' + 
// 마커 위에 커스텀오버레이를 표시합니다
// 마커를 중심으로 커스텀 오버레이를 표시하기위해 CSS를 이용해 위치를 설정했습니다
<% @products.each do |product|%>
        var content = '<div class="wrap">' + 
            '    <div class="info">' + 
            '        <div class="title" value= "<%= product.id%>">' + 
            '            <%= product.area_type%>-신고누적(<%= product.likes.count %>)' + 
            '            <div class="close"  title="닫기"></div>' + 
            '        </div>' + 
            '        <div class="body">' + 
            '            <div class="img">' +
            '                <img src="<%= product.image_address%>" width="73" height="70">' +
            '           </div>' + 
            '            <div class="desc">' + 
            '                <div class="ellipsis"><h5><%= product.area_name%></h5></div>' + 
            '    <a href = "/products/<%= product.id %>" class="btn btn-info btn-sm">자세히보기</a>' +
            '            </div>' + 
            '            </div>' + 
            '        </div>' + 
            '    </div>' +    
            '</div>'; 
        var m = "<%= product.area_type%>";
        console.log(m)
    positions.push(
        {
        content: content,
        latlng: new daum.maps.LatLng(<%=product.latitude %>, <%=product.longitude %>),
        imarker: m
        }
    );
<% end %>

console.log(overlay);
var overlay = [];
for (var i = 0 ; i < positions.length; i ++) {
    
    if  (positions[i].imarker=="흡연구역"){ // "<@%= asset_path 'g2.png' %>"
                            
    var markerImageUrl = "<%= asset_path 'smoking.png' %>"
	    markerImageSize = new daum.maps.Size(30, 41) // 마커 이미지의 크기
	    markerImageOptions = { 
	        offset : new daum.maps.Point(16, 40)// 마커 좌표에 일치시킬 이미지 안의 좌표
	    };

	// 마커 이미지를 생성한다
	var markerImage = new daum.maps.MarkerImage(markerImageUrl, markerImageSize, markerImageOptions);

    var marker = new daum.maps.Marker({
        map: map, 
        image : markerImage,
        position: positions[i].latlng,
        title: i
    });
    }
     else  //<!-- @products.area_type.eql?("단속구역") %> -->
    {
    var markerImageUrl = "<%= asset_path 'penalty.png' %>", 
	    markerImageSize = new daum.maps.Size(30, 41), // 마커 이미지의 크기
	    markerImageOptions = { 
	        offset : new daum.maps.Point(16, 40)// 마커 좌표에 일치시킬 이미지 안의 좌표
	    };

	// 마커 이미지를 생성한다
	var markerImage = new daum.maps.MarkerImage(markerImageUrl, markerImageSize, markerImageOptions);

    var marker = new daum.maps.Marker({
        map: map, 
        image : markerImage,
        position: positions[i].latlng,
        title: i
    });
    }
    
    console.log(marker);
   overlay[i]= new daum.maps.CustomOverlay({
            content: positions[i].content,
            position: positions[i].latlng
    });
    console.log(overlay.length);
    
    (function(marker, overlay) {
        // 마커에 click 이벤트를 등록하고 마우스 오버 시 인포윈도우를 표시합니다.
           
    daum.maps.event.addListener(marker, 'click', function() {
            var selectedMarker = marker;
            for (var j = 0; j < positions.length; j ++) {
            if (selectedMarker || selectedMarker == marker) {
                overlay[j].setMap(null);
            };
            };
            overlay[marker.getTitle()].setMap(map);
        });
// 커스텀 오버레이를 닫기 위해 호출되는 함수입니다 
        // 마커에 mouseout 이벤트를 등록하고 마우스 아웃 시 인포윈도우를 닫습니다
        daum.maps.event.addListener(marker, 'mouseout', function() {
          $( ".close" ).click( function() {
           overlay[marker.getTitle()].setMap(null); 
            });
        });
    })(marker, overlay);
    
};
</script>
  



  

  

<style>
    .wrap {position: absolute;left: 0;bottom: 40px;width: 288px;height: 132px;text-align: left;overflow: hidden;font-size: 12px;font-family: 'Malgun Gothic', dotum, '돋움', sans-serif;line-height: 1.5;}
    .wrap {padding: 0;margin-left: -144px;}
    .wrap .info {width: 286px;height: 120px;border-radius: 5px;border-bottom: 2px solid #ccc;border-right: 1px solid #ccc;overflow: hidden;background: #fff;}
    .wrap .info:nth-child(1) {border: 0;box-shadow: 0px 1px 2px #888;}
    .info .title {padding: 5px 0 0 10px;height: 30px;background: #eee;border-bottom: 1px solid #ddd;font-size: 16px;font-weight: bold;}
    .info .close {position: absolute;top: 10px;right: 10px;color: #888;width: 17px;height: 17px;background: url('http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/overlay_close.png');}
    .info .close:hover {cursor: pointer;}
    .info .body {position: relative;overflow: hidden;}
    .info .desc {position: relative;margin: 13px 0 0 90px;height: 75px;}
    .desc .ellipsis {overflow: hidden;text-overflow: ellipsis;white-space: nowrap;}
    .desc .jibun {font-size: 11px;color: #888;margin-top: -2px;}
    .info .img {position: absolute;top: 6px;left: 5px;width: 73px;height: 71px;border: 1px solid #ddd;color: #888;overflow: hidden;}
    .info:after {content: '';position: absolute;margin-left: -12px;left: 50%;bottom: 0;width: 22px;height: 12px;background: url('http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/vertex_white.png')}
    .info .link {color: #5085BB;}
</style>